<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Details</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Add SweetAlert CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.7.32/sweetalert2.min.css">
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background-color: #f4f4f4;
      margin: 0;
      padding: 0;
    }

    .navbar {
      background-color: #222831;
      padding: 20px 0;
    }

    .navbar .back-button {
      color: white;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .navbar .back-button:hover {
      color: #e6e6e6;
    }

    .container {
      max-width: 800px;
      margin: 30px auto;
      background: #fff;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
    }

    .product-content {
      display: flex;
      flex-direction: row;
    }

    .product-image {
      flex: 1;
      padding: 20px;
    }

    .carousel-inner {
      border-radius: 10px;
      overflow: hidden;
    }

    .product-details {
      flex: 1;
      padding: 20px;
    }

    .product-details h2 {
      color: #333;
      font-size: 1.8rem;
    }

    .product-details p {
      color: #666;
      font-size: 1rem;
    }

    .product-price {
      font-size: 1.5rem;
      font-weight: bold;
      color: #ff9800;
    }

    .product-quantity input {
      width: 60px;
      padding: 5px;
      font-size: 1rem;
      text-align: center;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    .add-to-cart-btn {
      width: 100%;
      background: #ff9800;
      color: white;
      font-size: 1rem;
      padding: 12px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
      margin-top: 15px;
    }

    .add-to-cart-btn:hover {
      background: #e68900;
    }

    /* Custom alert styles */
    .custom-alert {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      border-radius: 5px;
      color: white;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      z-index: 9999;
      opacity: 0;
      transition: opacity 0.3s;
    }
    
    .custom-alert.success {
      background-color: #4CAF50;
    }
    
    .custom-alert.error {
      background-color: #f44336;
    }
    
    .custom-alert.show {
      opacity: 1;
    }

    @media (max-width: 768px) {
      .product-content {
        flex-direction: column;
      }
    }
  </style>
</head>

<body>
    <nav class="navbar">
        <div class="container-fluid">
            <a href="javascript:void(0);" class="back-button" onclick="window.history.back()">
                <i class="fas fa-arrow-left"></i> Back to Menu
            </a>
        </div>
    </nav>
    
  <div class="container">
    <div class="product-content">
      <div class="product-image">
        <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
          <div class="carousel-indicators">
            <% product.images.forEach((image, index) => { %>
              <button type="button" data-bs-target="#productCarousel" data-bs-slide-to="<%= index %>" class="<%= index === 0 ? 'active' : '' %>" aria-label="Slide <%= index + 1 %>"></button>
            <% }) %>
          </div>
          <div class="carousel-inner">
            <% product.images.forEach((image, index) => { %>
              <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                <img src="<%= image %>" class="d-block w-100" alt="Product Image <%= index + 1 %>">
              </div>
            <% }) %>
          </div>
          <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
          </button>
          <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
          </button>
        </div>
      </div>

      <div class="product-details">
        <h2><%= product.name %></h2>
        <p><%= product.description %></p>
        <p class="product-price">â‚¹<%= product.price.toFixed(2) %></p>

        <div class="product-quantity">
          <label for="quantity">Quantity:</label>
          <input type="number" id="quantity" value="1" min="1" max="10">
        </div>

        <button class="add-to-cart-btn" onclick="addToCart('<%= product._id %>')">Add to Cart</button>
      </div>
    </div>
  </div>

  <!-- Custom alert container -->
  <div id="customAlert" class="custom-alert"></div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
  <!-- Load SweetAlert with correct version and use onload to verify it loaded -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.7.32/sweetalert2.min.js"></script>
  <script>
    // Check if SweetAlert loaded successfully
    let sweetAlertLoaded = typeof Swal !== 'undefined';
    
    // Custom alert function as a fallback
    function showCustomAlert(message, type, duration = 3000) {
      const alertElement = document.getElementById('customAlert');
      alertElement.textContent = message;
      alertElement.className = `custom-alert ${type}`;
      
      // Show the alert
      setTimeout(() => {
        alertElement.classList.add('show');
      }, 10);
      
      // Hide after duration
      setTimeout(() => {
        alertElement.classList.remove('show');
      }, duration);
    }

    function addToCart(productId) {
      const quantity = parseInt(document.getElementById('quantity').value);
      
      fetch('/user/cart/add', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
          },
          body: JSON.stringify({ productId, quantity: quantity })
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
              // Show success message with item details
              const addedItem = data.cart.items.find(item => item.productId === productId);
              const itemName = addedItem ? addedItem.name : 'Item';
              
              if (sweetAlertLoaded) {
                  Swal.fire({
                      icon: 'success',
                      title: 'Added to Cart!',
                      text: `${itemName} has been added successfully.`,
                      showConfirmButton: false,
                      timer: 1500
                  });
              } else {
                  showCustomAlert(`${itemName} has been added to cart!`, 'success');
              }
              
              // Update cart UI elements
              updateCartUI(data.cart);
          } else {
              if (sweetAlertLoaded) {
                  Swal.fire({
                      icon: 'error',
                      title: 'Oops!',
                      text: data.message || 'Failed to add item to cart.',
                  });
              } else {
                  showCustomAlert(data.message || 'Failed to add item to cart.', 'error');
              }
          }
      })
      .catch(error => {
          console.error('Error adding item to cart:', error);
          
          if (sweetAlertLoaded) {
              Swal.fire({
                  icon: 'error',
                  title: 'Error!',
                  text: 'Something went wrong. Please try again.',
              });
          } else {
              showCustomAlert('Something went wrong. Please try again.', 'error');
          }
      });
    }

    function updateCartUI(cart) {
        // Update cart count - count total quantity, not just number of items
        const cartCountElement = document.getElementById('cart-count');
        if (cartCountElement) {
            const totalQuantity = cart.items.reduce((total, item) => total + item.quantity, 0);
            cartCountElement.innerText = totalQuantity;
        }
        
        // Update cart total if you have that element
        const cartTotalElement = document.getElementById('cart-total');
        if (cartTotalElement) {
            cartTotalElement.innerText = `$${cart.total.toFixed(2)}`;
        }
    }
  </script>
</body>

</html>