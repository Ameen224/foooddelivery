<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Panel</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> 
  <style>
    body {
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 0;
      background: linear-gradient(135deg, #f9d423, #ff4e50);
      color: #333;
    }

    .navbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: rgba(255, 255, 255, 0.9);
      padding: 15px 30px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      border-radius: 0 0 12px 12px;
    }

    .navbar .brand {
      color: #333;
      font-size: 24px;
      font-weight: bold;
      text-decoration: none;
    }

    .navbar .nav-buttons {
      display: flex;
      gap: 15px;
    }

    .navbar button {
      background-color: #ffcc00;
      border: none;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      border-radius: 25px;
      color: #333;
      font-weight: bold;
      transition: background-color 0.3s ease;
    }

    .navbar button:hover {
      background-color: #e6b800;
    }

    .container {
      background: rgba(255, 255, 255, 0.9);
      padding: 20px;
      margin: 20px;
      border-radius: 12px;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
      background-color: #fff;
      border: 2px solid black;
      border-radius: 12px;
      overflow: hidden;
    }

    table th, table td {
      border: 2px solid black;
      padding: 12px;
      text-align: left;
    }

    table th {
      background-color: #ffcc00;
      color: #333;
      font-weight: bold;
    }

    table tr:nth-child(even) {
      background-color: #fff8e1;
    }

    table tr:nth-child(odd) {
      background-color: #ffffff;
    }

    .btn {
      border: none;
      padding: 8px 12px;
      font-size: 14px;
      cursor: pointer;
      border-radius: 4px;
      transition: background-color 0.3s ease;
    }

    .approve-btn {
      background-color: #4CAF50;
      color: white;
    }

    .approve-btn:hover {
      background-color: #45a049;
    }

    .delete-btn {
      background-color: #f44336;
      color: white;
    }

    .delete-btn:hover {
      background-color: #e53935;
    }

    .btn-container {
      display: flex;
      gap: 10px;
      justify-content: center;
    }
    .form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.form-group input[type="text"],
.form-group input[type="file"] {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.image-preview-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 10px;
}

.image-preview-container img {
    max-width: 100px;
    max-height: 100px;
    border-radius: 4px;
}

.btn-submit {
    background-color: #4CAF50;
    color: white;
    padding: 10px 20px;
    border-radius: 8px;
    border: none;
    cursor: pointer;
}

.btn-cancel {
    background-color: #f44336;
    color: white;
    padding: 10px 20px;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    margin-left: 10px;
}
    /* Hide the "Add Category" button by default */
    #addCategoryBtn {
      display: none;
    }
  </style>
</head>
<body>

  <div class="navbar">
    <a href="#" class="brand">Admin Panel</a>
    <div class="nav-buttons">
      <button id="vendorListBtn">Vendors</button>
      <button id="pendingVendorsBtn">Pending Vendors</button>
      <button id="categoryListBtn">Category</button>
      <button id="userListBtn">Users</button>
      <button id="orderListBtn">Orders</button>
      <button id="deliveryListBtn">Deliveries</button>
    </div>
  </div>

  <div class="container" id="tableContainer">
    <h1 id="tableTitle">Categories</h1>
    <button id="addCategoryBtn" style="background-color: #4CAF50; color: white; padding: 10px 20px; border-radius: 8px; margin-bottom: 20px;">
      Add Category
    </button>

  <!-- Category Form (Initially hidden) -->
<div id="categoryFormContainer" style="display: none;">
  <form id="categoryForm" enctype="multipart/form-data">
    <input type="text" id="categoryName" placeholder="Enter category name" required
      style="padding: 8px; margin-bottom: 10px; border-radius: 4px; border: 1px solid #ccc;">
    <input type="file" id="categoryImage" accept="image/*" required
      style="padding: 8px; margin-bottom: 10px; border-radius: 4px; border: 1px solid #ccc;">
    <button type="submit" style="background-color: #ffcc00; color: white; padding: 10px 20px; border-radius: 8px;">
      Save Category
    </button>
    <button type="button" id="cancelBtn" style="background-color: #f44336; color: white; padding: 10px 20px; border-radius: 8px; margin-left: 10px;">
      Cancel
    </button>
  </form>
</div>



    <table id="dataTable">
      <thead>
        <tr id="tableHeader"></tr>
      </thead>
      <tbody id="tableBody"></tbody>
    </table>
  </div>

  <script>
  const tableTitle = document.getElementById("tableTitle");
const tableHeader = document.getElementById("tableHeader");
const tableBody = document.getElementById("tableBody");
const addCategoryBtn = document.getElementById("addCategoryBtn");
const categoryFormContainer = document.getElementById("categoryFormContainer");
const categoryForm = document.getElementById("categoryForm");
const categoryImageInput = document.getElementById("categoryImage");
const categoryImagePreviewContainer = document.getElementById("categoryImagePreviewContainer");

let isEditing = false;
let currentCategoryId = null;


 // Event listeners for the buttons
 document.getElementById("vendorListBtn").addEventListener("click", () => {
      addCategoryBtn.style.display = "none"; // Hide the "Add Category" button
      fetchAndDisplayData("/admin/vendor-list", "Vendors", ["Restaurant Name", "Email", "Address"], true);
    });
// event listener for the button
    document.getElementById("pendingVendorsBtn").addEventListener("click", () => {
      addCategoryBtn.style.display = "none"; // Hide the "Add Category" button
      fetchAndDisplayData("/admin/pending-vendors", "Pending Vendors", ["Restaurant Name", "Email", "Address"], false, true);
    });


// Event listeners for the buttons
document.getElementById("categoryListBtn").addEventListener("click", () => {
    addCategoryBtn.style.display = "block";
    fetchAndDisplayCategories();
});

// Show the form to add a new category
addCategoryBtn.addEventListener("click", () => {
    isEditing = false;
    categoryFormContainer.style.display = "block";
    categoryForm.reset();
    categoryImagePreviewContainer.innerHTML = "";
});

// Hide the form when clicking cancel
document.getElementById("cancelBtn").addEventListener("click", () => {
    categoryFormContainer.style.display = "none";
    categoryForm.reset();
    categoryImagePreviewContainer.innerHTML = "";
});

// Handle form submission for adding/editing category
categoryForm.addEventListener("submit", async function (event) {
    event.preventDefault();

    const categoryName = document.getElementById("categoryName").value;
    const categoryImage = categoryImageInput.files[0];

    if (!categoryImage && !isEditing) {
        alert("Please select an image.");
        return;
    }

    const formData = new FormData();
    formData.append("name", categoryName);
    if (categoryImage) {
        formData.append("image", categoryImage);
    }

    const url = isEditing ? `/admin/edit-category/${currentCategoryId}` : "/admin/add-category";
    const method = isEditing ? "PUT" : "POST";

    try {
        const response = await fetch(url, {
            method: method,
            body: formData,
        });

        if (response.ok) {
            alert(isEditing ? "Category updated successfully!" : "Category added successfully!");
            categoryFormContainer.style.display = "none";
            fetchAndDisplayCategories(); // Refresh categories list
        } else {
            alert("Failed to save category.");
        }
    } catch (error) {
        alert("Error occurred while saving category.");
    }
});

// Function to fetch and display categories
async function fetchAndDisplayCategories() {
    tableTitle.textContent = "Categories";
    tableHeader.innerHTML = "";
    tableBody.innerHTML = "";

    try {
        const response = await fetch("/admin/category-list");
        if (!response.ok) throw new Error("Failed to fetch categories");

        const categories = await response.json();

        tableHeader.innerHTML = "<th>Category Name</th><th>Image</th><th>Actions</th>";

        categories.forEach(category => {
            const tr = document.createElement("tr");

            const categoryTd = document.createElement("td");
            categoryTd.textContent = category.name;
            tr.appendChild(categoryTd);

            const imageTd = document.createElement("td");
            const img = document.createElement("img");
            img.src = category.image || 'placeholder.jpg';
            img.style.width = "50px";
            img.style.height = "50px";
            img.style.objectFit = "cover";
            imageTd.appendChild(img);
            tr.appendChild(imageTd);

            const actionTd = document.createElement("td");

            // Edit Button
            const editBtn = document.createElement("button");
            editBtn.textContent = "Edit";
            editBtn.classList.add("btn", "approve-btn");
            editBtn.style.marginRight = "10px";
            editBtn.onclick = () => editCategory(category._id, category.name, category.image);
            actionTd.appendChild(editBtn);

            // Delete Button
            const deleteBtn = document.createElement("button");
            deleteBtn.textContent = "Delete";
            deleteBtn.classList.add("btn", "delete-btn");
            deleteBtn.onclick = () => deleteCategory(category._id);
            actionTd.appendChild(deleteBtn);

            tr.appendChild(actionTd);
            tableBody.appendChild(tr);
        });
    } catch (error) {
        console.error("Error fetching categories:", error);
        alert("Failed to load categories.");
    }
}





// Function to handle edit category
function editCategory(id, name, image) {
    isEditing = true;
    currentCategoryId = id;
    categoryFormContainer.style.display = "block";
    document.getElementById("categoryName").value = name;

    // Display the current image
    categoryImagePreviewContainer.innerHTML = "";
    if (image) {
        const img = document.createElement("img");
        img.src = image;
        img.style.maxWidth = "100px";
        img.style.maxHeight = "100px";
        categoryImagePreviewContainer.appendChild(img);
    }

    // Change form title and button text for editing
    tableTitle.textContent = "Edit Category";
}

// Function to delete category
async function deleteCategory(id) {
  console.log("id ",id);
  
    if (!confirm("Are you sure you want to delete this category?")) return;

    try {
        const response = await fetch(`/admin/delete-category/${id}`, {
            method: "DELETE",
        });

        if (response.ok) {
            alert("Category deleted successfully!");
            fetchAndDisplayCategories();
        } else {
            alert("Failed to delete category.");
        }
    } catch (error) {
        alert("Error occurred while deleting category.");
    }
}

// Handle new image preview for category image
categoryImageInput.addEventListener("change", function (event) {
    const files = Array.from(event.target.files);

    categoryImagePreviewContainer.innerHTML = "";

    files.forEach(file => {
        const reader = new FileReader();
        reader.onload = function (e) {
            const img = document.createElement("img");
            img.src = e.target.result;
            img.style.maxWidth = "100px";
            img.style.maxHeight = "100px";
            categoryImagePreviewContainer.appendChild(img);
        };
        reader.readAsDataURL(file);
    });
});






    // Function to fetch and display data in tables (for vendors, pending vendors, etc.)
    async function fetchAndDisplayData(url, title, headers, showDelete = false, showApprove = false) {
  tableTitle.textContent = title;
  tableHeader.innerHTML = "";
  tableBody.innerHTML = "";

  // Dynamically create headers
  headers.forEach(header => {
    const th = document.createElement("th");
    th.textContent = header;
    tableHeader.appendChild(th);
  });

  // Add an "Actions" header
  const actionTh = document.createElement("th");
  actionTh.textContent = "Actions";
  tableHeader.appendChild(actionTh);

  try {
    const response = await fetch(url);
    const data = await response.json();

    data.forEach(row => {
      const tr = document.createElement("tr");

      // Map the required fields
      const rowData = [
        row.restaurantName || '',  // restaurant name
        row.email || '',            // email
        row.restaurantAddress || '' // address
      ];

      // Dynamically display data based on rowData
      rowData.forEach(cell => {
        const td = document.createElement("td");
        td.textContent = cell;
        tr.appendChild(td);
      });

      const actionTd = document.createElement("td");

      // Approve Button (only for pending vendors)
      if (showApprove) {
        const approveBtn = document.createElement("button");
        approveBtn.textContent = "Approve";
        approveBtn.classList.add("btn", "approve-btn");
        approveBtn.onclick = () => approveVendor(row._id);
        actionTd.appendChild(approveBtn);
      }

      // Delete Button (for vendors and pending vendors)
      if (showDelete) {
        const deleteBtn = document.createElement("button");
        deleteBtn.textContent = "Delete";
        deleteBtn.classList.add("btn", "delete-btn");
        deleteBtn.onclick = () => deleteVendor(row._id);
        actionTd.appendChild(deleteBtn);
      }

      // Block/Unblock Button (only for vendors, not pending vendors)
      if (!showApprove) {
        const blockUnblockBtn = document.createElement("button");
        blockUnblockBtn.classList.add("btn");
        blockUnblockBtn.style.marginLeft = "10px";  

        if (row.isBlocked) {
          blockUnblockBtn.textContent = "Unblock";
          blockUnblockBtn.classList.add("approve-btn");
          blockUnblockBtn.onclick = () => unblockVendor(row._id);
        } else {
          blockUnblockBtn.textContent = "Block";
          blockUnblockBtn.classList.add("delete-btn");
          blockUnblockBtn.onclick = () => blockVendor(row._id);
        }
        actionTd.appendChild(blockUnblockBtn);
      }

      tr.appendChild(actionTd);
      tableBody.appendChild(tr);
    });
  } catch (error) {
    alert("Error fetching data.");
  }
}


// Function to block a vendor
async function blockVendor(id) {
  Swal.fire({
    title: "Are you sure?",
    text: "This vendor will be blocked!",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#d33",
    cancelButtonColor: "#3085d6",
    confirmButtonText: "Yes, block it!"
  }).then(async (result) => {
    if (result.isConfirmed) {
      try {
        const response = await fetch(`/admin/block-vendor/${id}`, { method: "PATCH" });

        if (response.ok) {
          Swal.fire("Blocked!", "Vendor has been blocked.", "success");
          fetchAndDisplayData("/admin/vendor-list", "Vendors", ["Restaurant Name", "Email", "Address"], true);
        } else {
          Swal.fire("Error!", "Failed to block vendor.", "error");
        }
      } catch (error) {
        Swal.fire("Error!", "An error occurred while blocking the vendor.", "error");
      }
    }
  });
}


// Function to unblock a vendor
async function unblockVendor(id) {
  Swal.fire({
    title: "Are you sure?",
    text: "This vendor will be unblocked!",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#28a745",
    cancelButtonColor: "#3085d6",
    confirmButtonText: "Yes, unblock it!"
  }).then(async (result) => {
    if (result.isConfirmed) {
      try {
        const response = await fetch(`/admin/unblock-vendor/${id}`, { method: "PATCH" });

        if (response.ok) {
          Swal.fire("Unblocked!", "Vendor has been unblocked.", "success");
          fetchAndDisplayData("/admin/vendor-list", "Vendors", ["Restaurant Name", "Email", "Address"], true);
        } else {
          Swal.fire("Error!", "Failed to unblock vendor.", "error");
        }
      } catch (error) {
        Swal.fire("Error!", "An error occurred while unblocking the vendor.", "error");
      }
    }
  });
}


    // Function to delete vendor
    async function deleteVendor(id) {
  Swal.fire({
    title: "Are you sure",
    text: "You won't be able to revert this!",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#d33",
    cancelButtonColor: "#3085d6",
    confirmButtonText: "Yes, delete it!"
  }).then(async (result) => {
    if (result.isConfirmed) {
      try {
        const response = await fetch(`/admin/delete-vendor/${id}`, { method: "DELETE" });

        if (response.ok) {
          Swal.fire("Deleted!", "Vendor has been deleted.", "success");
          fetchAndDisplayData("/admin/vendor-list", "Vendors", ["Restaurant Name", "Email", "Address"], true);
        } else {
          Swal.fire("Error!", "Failed to delete vendor.", "error");
        }
      } catch (error) {
        Swal.fire("Error!", "An error occurred while deleting the vendor.", "error");
      }
    }
  });
}


    // Approve Vendor
    async function approveVendor(id) {
      try {
        const response = await fetch(`/admin/approve-vendor/${id}`, { method: "PATCH" });
        if (response.ok) {
          swal.fire({
            icon:"success",
            title:"vendor approved successfully"
          })
          fetchAndDisplayData("/admin/pending-vendors", "Pending Vendors", ["Restaurant Name", "Email", "Address"], false, true);
        }
      } catch (error) {
        alert("Error approving vendor.");
      }
    }

    // Fetch and display vendor list by default
  fetchAndDisplayData("/admin/vendor-list", "Vendors", ["Restaurant Name", "Email", "Address"], true);

  </script>
</body>
</html>
