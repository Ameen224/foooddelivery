<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vendor Profile</title>
  <link rel="stylesheet" href="/css/bootstrap.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="http://localhost:3000/css/font-awesome.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    :root {
  --primary-color: #ff6b6b;
  --accent-color: #4ecdc4;
  --dark-color: #343a40;
  --light-color: #f8f9fa;
  --gradient-primary: linear-gradient(135deg, var(--primary-color), var(--accent-color));
}

body {
  font-family: 'Inter', 'Segoe UI', system-ui, sans-serif;
  background: linear-gradient(135deg, #f9d423, #ff4e50);
  margin: 0;
  padding: 0;
  line-height: 1.6;
  color: var(--dark-color);
}

.navbar {
  background-color: #ffffff;
  padding: 15px;
  text-align: center;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  border-radius: 0 0 8px 8px;
}

.navbar-container {
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 35rem;
}

.navbar a {
  text-decoration: none;
  color: var(--dark-color);
  font-size: 16px;
  font-weight: bold;
  padding: 10px 15px;
  border-radius: 4px;
  background-color: #ffcc00;
  transition: all 0.3s ease;
}

.navbar a:hover {
  background-color: #e6b800;
  transform: translateY(-2px);
}

.profile-container {
  background: rgba(255, 255, 255, 0.95);
  padding: 2.5rem;
  border-radius: 16px;
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.1);
  max-width: 700px;
  width: 100%;
  margin: 2rem auto;
  position: relative;
  overflow: hidden;
}

.profile-container::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 5px;
  background: var(--gradient-primary);
}

.profile-container h3 {
  font-size: 1.8rem;
  font-weight: 700;
  color: var(--dark-color);
  text-align: center;
  margin-bottom: 1.5rem;
  letter-spacing: -0.5px;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  font-size: 0.9rem;
  font-weight: 600;
  color: var(--dark-color);
  margin-bottom: 0.5rem;
  display: block;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.form-group input {
  width: 100%;
  padding: 0.8rem 1rem;
  font-size: 1rem;
  border: 1px solid #ddd;
  border-radius: 8px;
  background: var(--light-color);
  transition: all 0.3s ease;
}

.form-group input:focus {
  border-color: var(--accent-color);
  outline: none;
  box-shadow: 0 0 0 3px rgba(78, 205, 196, 0.2);
}

.btn-update {
  background: var(--gradient-primary);
  color: white;
  padding: 0.8rem 1.5rem;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  width: 100%;
  margin-top: 1rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.btn-update:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(255, 107, 107, 0.3);
}

.btn-secondary {
  background: #6c757d;
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  font-size: 0.9rem;
  border: none;
  cursor: pointer;
  margin-bottom: 0.5rem;
  margin-right: 0.5rem;
  transition: all 0.3s ease;
}

.btn-secondary:hover {
  background: #555f66;
  transform: translateY(-2px);
}

.location-section {
  background: #f0f8ff;
  padding: 1.5rem;
  border-radius: 12px;
  margin-bottom: 1.5rem;
  border: 1px solid rgba(78, 205, 196, 0.2);
}

.location-section h4 {
  margin-bottom: 1rem;
  color: var(--dark-color);
  font-weight: 600;
}

.location-inputs {
  display: flex;
  gap: 1rem;
}

#map {
  height: 300px;
  width: 100%;
  border-radius: 12px;
  margin-top: 1rem;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.loading {
  display: none;
  text-align: center;
  margin-top: 1.5rem;
}

.message {
  margin-top: 1.5rem;
  font-size: 0.9rem;
  text-align: center;
  font-weight: 500;
}

.message.success {
  color: #28a745;
}

.message.error {
  color: #dc3545;
}

@media (max-width: 768px) {
  .location-inputs {
    flex-direction: column;
    gap: 0.5rem;
  }

  .profile-container {
    padding: 1.5rem;
    margin: 1rem;
  }

  .navbar a {
    margin: 0 5px;
    padding: 8px 12px;
    font-size: 14px;
  }
}
  </style>
</head>
<body>

 <!-- Updated Navbar with space-between -->
 <div class="navbar">
  <div class="navbar-container">
    <a href="/vendor/home">Products</a>
    <a href="/vendor/orders">Orders</a>
    <a href="/vendor/profile">Profile</a>
  </div>
</div>
  <div class="profile-container">
    <h3>Vendor Profile</h3>
    <!-- Loading Spinner -->
    <div class="loading" id="loading">
      <img src="https://i.gifer.com/YCZH.gif" alt="Loading...">
      <p>Updating...</p>
    </div>
    <form id="profileForm">
      <div class="form-group">
        <label for="restaurantName">Restaurant Name</label>
        <input type="text" id="restaurantName" name="restaurantName" value="<%= vendor.restaurantName %>" required>
      </div>
      <div class="form-group">
        <label for="phoneNumber">Phone Number</label>
        <input type="text" id="phoneNumber" name="phoneNumber" value="<%= vendor.phoneNumber %>" required>
      </div>

      <!-- Location Section -->
      <div class="location-section">
        <h4>Restaurant Location</h4>
        <p>Enter your restaurant's coordinates or use the buttons below to set location</p>
        
        <div class="location-inputs">
          <div class="form-group">
            <label for="latitude">Latitude</label>
            <input type="text" id="latitude" name="latitude" value="<%= vendor.location ? vendor.location.latitude : '' %>">
          </div>
          <div class="form-group">
            <label for="longitude">Longitude</label>
            <input type="text" id="longitude" name="longitude" value="<%= vendor.location ? vendor.location.longitude : '' %>">
          </div>
        </div>
        
        <div>
          <button type="button" id="getLocationBtn" class="btn-secondary">
            <i class="fas fa-map-marker-alt"></i> Use Current Location
          </button>
          <button type="button" id="showMapBtn" class="btn-secondary">
            <i class="fas fa-map"></i> Pick Location on Map
          </button>
        </div>
        
        <!-- Map container for selecting location -->
        <div id="map"></div>
        
        <!-- Fallback iframe map that will be shown if JavaScript API fails -->
        <div id="mapFallback" class="map-fallback" style="display: none;">
          <iframe
            width="100%"
            height="100%"
            style="border:0; border-radius: 8px;"
            loading="lazy"
            allowfullscreen
            referrerpolicy="no-referrer-when-downgrade"
            src="https://www.google.com/maps/embed/v1/place?key=YOUR_ACTUAL_API_KEY&q=Restaurant">
          </iframe>
        </div>
      </div>

      <button type="submit" class="btn-update">Update Profile</button>
    </form>
    <div id="message" class="message"></div>
  </div>

  <!-- Google Maps API - Improved loading with fallback -->
  <script>
    let map, marker;

    // Function to load Google Maps API
    function loadGoogleMapsAPI() {
      const apiKey = 'AIzaSyCQTVsuDfldoX5wwtX9P1LR58_4ZoXa_8w'; // Replace with your actual API key
      
      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=initializeMapFunctions`;
      script.async = true;
      script.defer = true;
      
      // Handle API loading error
      script.onerror = function() {
        console.error("Google Maps API failed to load");
        document.getElementById('map').style.display = 'none';
        document.getElementById('mapFallback').style.display = 'block';
        
        // Update iframe with coordinates if available
        const lat = document.getElementById('latitude').value || '';
        const lng = document.getElementById('longitude').value || '';
        
        if (lat && lng) {
          const iframe = document.querySelector('#mapFallback iframe');
          iframe.src = `https://www.google.com/maps/embed/v1/view?key=${apiKey}&center=${lat},${lng}&zoom=15`;
        }
      };
      
      document.head.appendChild(script);
    }

    // Initialize map functions
    function initializeMapFunctions() {
      const lat = parseFloat(document.getElementById('latitude').value) || 47.6062; // Default to Seattle
      const lng = parseFloat(document.getElementById('longitude').value) || -122.3321;

      map = new google.maps.Map(document.getElementById('map'), {
        center: { lat, lng },
        zoom: 15,
      });

      marker = new google.maps.Marker({
        position: { lat, lng },
        map: map,
        draggable: true,
        title: "Restaurant Location",
      });

      // Update lat/lng fields when marker is dragged
      google.maps.event.addListener(marker, 'dragend', function() {
        const position = marker.getPosition();
        document.getElementById('latitude').value = position.lat().toFixed(6);
        document.getElementById('longitude').value = position.lng().toFixed(6);
      });

      // Add click event to map to place marker
      google.maps.event.addListener(map, 'click', function(event) {
        const clickedLocation = event.latLng;
        marker.setPosition(clickedLocation);
        document.getElementById('latitude').value = clickedLocation.lat().toFixed(6);
        document.getElementById('longitude').value = clickedLocation.lng().toFixed(6);
      });
    }

    // Get current location
    function getLocation() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            document.getElementById('latitude').value = lat.toFixed(6);
            document.getElementById('longitude').value = lng.toFixed(6);
            
            // Initialize map with these coords
            if (map) {
              map.setCenter({ lat, lng });
              marker.setPosition({ lat, lng });
            }
          },
          function(error) {
            let errorMessage;
            switch(error.code) {
              case error.PERMISSION_DENIED:
                errorMessage = "Location access denied. Please enable location services.";
                break;
              case error.POSITION_UNAVAILABLE:
                errorMessage = "Location information unavailable.";
                break;
              case error.TIMEOUT:
                errorMessage = "Request for location timed out.";
                break;
              default:
                errorMessage = "An unknown error occurred.";
            }
            Swal.fire("Error", errorMessage, "error");
          }
        );
      } else {
        Swal.fire("Error", "Geolocation is not supported by this browser.", "error");
      }
    }

    // Form submission
    document.getElementById('profileForm').addEventListener('submit', async function(event) {
      event.preventDefault();

      const restaurantName = document.getElementById('restaurantName').value.trim();
      const phoneNumber = document.getElementById('phoneNumber').value.trim();
      const latitude = document.getElementById('latitude').value.trim();
      const longitude = document.getElementById('longitude').value.trim();
      
      const loading = document.getElementById('loading');
      const message = document.getElementById('message');

      if (!restaurantName || !phoneNumber) {
        message.innerHTML = "<span class='error'>Restaurant name and phone number are required.</span>";
        return;
      }

      loading.style.display = 'block';
      message.innerHTML = '';

      try {
        const response = await fetch('/vendor/update-profile', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            restaurantName, 
            phoneNumber,
            location: {
              latitude: latitude ? parseFloat(latitude) : null,
              longitude: longitude ? parseFloat(longitude) : null
            }
          }),
        });

        loading.style.display = 'none';

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Server Error: ${response.status} - ${errorText}`);
        }

        const result = await response.json();

        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Your profile has been updated',
          showConfirmButton: false,
          timer: 2000
        }).then(() => {
          location.reload();
        });

      } catch (error) {
        console.error('Error:', error);
        message.innerHTML = `<span class='error'>An error occurred: ${error.message}</span>`;
        loading.style.display = 'none';
      }
    });

    // Event listeners for buttons
    document.getElementById('getLocationBtn').addEventListener('click', getLocation);
    document.getElementById('showMapBtn').addEventListener('click', function() {
      document.getElementById('map').style.display = 'block';
      document.getElementById('mapFallback').style.display = 'none';
    });

    // Load Google Maps API when page loads
    window.onload = loadGoogleMapsAPI;
  </script>
</body>
</html>